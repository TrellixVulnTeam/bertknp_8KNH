#!/usr/bin/env bash

usage() {
  echo "Usage: echo sentence | $0 [-v] [-b BERT_MODEL] [-m BERT_PARSING_MODEL_DIR] [-P BERT_PARSING_COMMAND] [-o BERT_PARSING_OPTIONS] [-O BERT_PARSING_OPTIONS_FROM_FILE] [-p PYTHON_COMMAND] [-f PARSING_INPUT_FORMAT] [-tab] [-pyknp]"
  exit 1
}

version() {
  echo "$VERSION"
  exit 0
}

VERSION="berknp 0.22"
BASE_DIR=$(dirname "$0")/..
echo "$BASE_DIR" | grep -q '^/' &>/dev/null
if [[ $? -ne 0 ]]; then
  BASE_DIR=$(pwd)/$BASE_DIR
fi

BERT_PARSING_COMMAND=$BASE_DIR/repo/pytorch-pretrained-bert-parsing/examples/run_parsing.py
BERT_MODEL=$BASE_DIR/pretrained_model
BERT_PARSING_MODEL_DIR=$BASE_DIR/model/latest
POS_LIST=$BASE_DIR/repo/pytorch-pretrained-bert-parsing/examples/pos.list
BERT_PARSING_OPTIONS="--max_seq_length 192 --prediction_result_filename - --do_predict --parsing --knp_mode"
BERT_PARSING_OUTPUT_OPTIONS="--output_tree"
PARSING_INPUT_FORMAT="lattice"
VERBOSITY=0

PYTHON_COMMAND=python3

for OPT in "$@"; do
  case $OPT in
  -r)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    shift 2
    ;;
  -b)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    BERT_MODEL=$2
    shift 2
    ;;
  -m)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    BERT_PARSING_MODEL_DIR=$2
    shift 2
    ;;
  -p)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    PYTHON_COMMAND=$2
    shift 2
    ;;
  -P)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    BERT_PARSING_COMMAND=$2
    shift 2
    ;;
  -o)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    BERT_PARSING_OPTIONS=$2
    shift 2
    ;;
  -O)
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    BERT_PARSING_OPTIONS_FROM_FILE=$2
    shift 2
    ;;
  -tab)
    BERT_PARSING_OUTPUT_OPTIONS=""
    shift 1
    ;;
  -pyknp | --pyknp)
    BERT_PARSING_OPTIONS="$BERT_PARSING_OPTIONS --single_sentence"
    shift 1
    ;;
  -f)
    # input format ("conll", "lattice", "knp", or "text"), default: "lattice"
    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
      echo "$0: option requires an argument -- $1" 1>&2
      exit 1
    fi
    PARSING_INPUT_FORMAT="$2"
    shift 2
    ;;
  -v | --verbose)
    VERBOSITY=$((${VERBOSITY} + 1))
    shift 1
    ;;
  -V | -version | --version)
    version
    ;;
  -h | -help | --help)
    usage
    ;;
  -*)
    usage
    ;;
  *)
    ;;
  esac
done

BERT_PARSING_OPTIONS="$BERT_PARSING_OPTIONS --input_format $PARSING_INPUT_FORMAT"

if [[ -f "$BERT_PARSING_OPTIONS_FROM_FILE" ]]; then
  BERT_PARSING_OPTIONS=$(cat "$BERT_PARSING_OPTIONS_FROM_FILE")
fi

if [[ ${VERBOSITY} -gt 0 ]]; then
  $PYTHON_COMMAND "$BERT_PARSING_COMMAND" --bert_model "$BERT_MODEL" --output_dir "$BERT_PARSING_MODEL_DIR" --pos_list $POS_LIST $BERT_PARSING_OPTIONS $BERT_PARSING_OUTPUT_OPTIONS
else
  $PYTHON_COMMAND "$BERT_PARSING_COMMAND" --bert_model "$BERT_MODEL" --output_dir "$BERT_PARSING_MODEL_DIR" --pos_list $POS_LIST $BERT_PARSING_OPTIONS $BERT_PARSING_OUTPUT_OPTIONS 2> /dev/null
fi
